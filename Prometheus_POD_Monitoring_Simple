cd C:\Kubernates\Prometheus\PODmonitoring_Prometheus

Step 1
------------------------------------------------------------------
i) Cluster Role creation:
kubectl apply -f prometheus_clusterrole.yaml
For cluster Role creation use apiVersion: "rbac.authorization.k8s.io/v1" instead of "rbac.authorization.k8s.io/v1beta1"

ii) Service Account creation:
kubectl create -f promethus_serviceaccount.yaml

iii) Cluster role binding creation between Service account and cluster role.
For cluster Role creation use apiVersion: "rbac.authorization.k8s.io/v1" instead of "rbac.authorization.k8s.io/v1beta1"


Step 2: Deploy Prometheus
--------------------------------------------------------------------

i) prometheus config file creation. Dont change the "prometheus.yml" file name as inside config map there is a default folder which prometheus runs

kubectl create configmap prometheus-config --from-file prometheus.yml

ii) prometheus deployment
kubectl create -f prometheus-deployment.yaml


step3: Sample POD creation
-----------------------------------------
Note: This sample app is REST API endpoint that will expose the Prometheus-format metrics. If your application does not have Prometheus-format metrics, there are several metrics exporters that will help you convert it to the native Prometheus format. Once the /metrics endpoint is created, Prometheus will use its powerful auto-discover plugins to collect, filter, and aggregate the metrics. Prometheus has good support for a number of metrics providers including Kubernetes

i) create a sample POD exposing REST /metrics
kubectl create -f rpc-app-deployment.yaml

ii) create the service for sample POD.
kubectl create -f rpc-app-service.yaml

Now you can access the "http://localhost:30900/targets?search=" for the targets status.
